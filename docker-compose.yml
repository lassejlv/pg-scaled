services:
  # Primary PostgreSQL Database (Master)
  postgres-primary:
    image: postgres:17-alpine
    container_name: postgres-primary
    env_file:
      - env.prod
    environment:
      POSTGRES_USER: ${POSTGRES_ADMIN_USER}
      POSTGRES_PASSWORD: ${POSTGRES_ADMIN_PASSWORD}
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./config/primary.conf:/etc/postgresql/postgresql.conf
      - ./scripts/init-primary.sh:/docker-entrypoint-initdb.d/init-primary.sh
    ports:
      - '${PRIMARY_PORT}:5432'
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    deploy:
      resources:
        limits:
          memory: ${PRIMARY_MEMORY_LIMIT}
          cpus: '${PRIMARY_CPU_LIMIT}'
        reservations:
          memory: 1G
          cpus: '0.5'
    networks:
      - postgres-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 30s
      timeout: 10s
      retries: 3

  # First PostgreSQL Replica
  postgres-replica-1:
    image: postgres:17-alpine
    container_name: postgres-replica-1
    env_file:
      - env.prod
    environment:
      POSTGRES_USER: ${POSTGRES_ADMIN_USER}
      POSTGRES_PASSWORD: ${POSTGRES_ADMIN_PASSWORD}
      PGUSER: ${POSTGRES_ADMIN_USER}
      POSTGRES_PRIMARY_HOST: postgres-primary
      POSTGRES_PRIMARY_PORT: 5432
    volumes:
      - postgres_replica1_data:/var/lib/postgresql/data
      - ./config/replica.conf:/etc/postgresql/postgresql.conf
      - ./scripts/init-replica.sh:/docker-entrypoint-initdb.d/init-replica.sh
    ports:
      - '${REPLICA1_PORT}:5432'
    depends_on:
      postgres-primary:
        condition: service_healthy
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    deploy:
      resources:
        limits:
          memory: ${REPLICA_MEMORY_LIMIT}
          cpus: '${REPLICA_CPU_LIMIT}'
        reservations:
          memory: 512M
          cpus: '0.3'
    networks:
      - postgres-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 30s
      timeout: 10s
      retries: 3

  # Second PostgreSQL Replica
  postgres-replica-2:
    image: postgres:17-alpine
    container_name: postgres-replica-2
    env_file:
      - env.prod
    environment:
      POSTGRES_USER: ${POSTGRES_ADMIN_USER}
      POSTGRES_PASSWORD: ${POSTGRES_ADMIN_PASSWORD}
      PGUSER: ${POSTGRES_ADMIN_USER}
      POSTGRES_PRIMARY_HOST: postgres-primary
      POSTGRES_PRIMARY_PORT: 5432
    volumes:
      - postgres_replica2_data:/var/lib/postgresql/data
      - ./config/replica.conf:/etc/postgresql/postgresql.conf
      - ./scripts/init-replica.sh:/docker-entrypoint-initdb.d/init-replica.sh
    ports:
      - '${REPLICA2_PORT}:5432'
    depends_on:
      postgres-primary:
        condition: service_healthy
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    deploy:
      resources:
        limits:
          memory: ${REPLICA_MEMORY_LIMIT}
          cpus: '${REPLICA_CPU_LIMIT}'
        reservations:
          memory: 512M
          cpus: '0.3'
    networks:
      - postgres-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 30s
      timeout: 10s
      retries: 3

  # PgBouncer Connection Pooler
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: pgbouncer
    env_file:
      - env.prod
    environment:
      DATABASES_HOST: postgres-primary
      DATABASES_PORT: 5432
      DATABASES_USER: ${POSTGRES_ADMIN_USER}
      DATABASES_PASSWORD: ${POSTGRES_ADMIN_PASSWORD}
      DATABASES_DBNAME: ${POSTGRES_DB}
      POOL_MODE: ${PGBOUNCER_POOL_MODE}
      MAX_CLIENT_CONN: ${PGBOUNCER_MAX_CLIENT_CONN}
      DEFAULT_POOL_SIZE: ${PGBOUNCER_DEFAULT_POOL_SIZE}
    volumes:
      - ./config/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
      - ./config/userlist.txt:/etc/pgbouncer/userlist.txt
    ports:
      - '${PGBOUNCER_PORT}:5432'
    depends_on:
      postgres-primary:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: ${PGBOUNCER_MEMORY_LIMIT}
          cpus: '${PGBOUNCER_CPU_LIMIT}'
        reservations:
          memory: 128M
          cpus: '0.1'
    networks:
      - postgres-network

  # HAProxy Load Balancer for Read Queries
  haproxy:
    image: haproxy:alpine
    container_name: haproxy-postgres
    env_file:
      - env.prod
    volumes:
      - ./config/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    ports:
      - '${HAPROXY_READ_PORT}:5000' # Read-only load balanced endpoint
      - '${HAPROXY_WRITE_PORT}:5001' # Write endpoint (primary only)
      - '${HAPROXY_STATS_PORT}:8080' # HAProxy stats
    depends_on:
      - postgres-primary
      - postgres-replica-1
      - postgres-replica-2
    deploy:
      resources:
        limits:
          memory: ${HAPROXY_MEMORY_LIMIT}
          cpus: '${HAPROXY_CPU_LIMIT}'
        reservations:
          memory: 128M
          cpus: '0.1'
    networks:
      - postgres-network

volumes:
  postgres_primary_data:
  postgres_replica1_data:
  postgres_replica2_data:

networks:
  postgres-network:
    driver: bridge
