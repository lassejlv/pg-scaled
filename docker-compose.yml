version: '3.8'

services:
  # Primary PostgreSQL Database (Master)
  postgres-primary:
    image: postgres:15-alpine
    container_name: postgres-primary
    environment:
      POSTGRES_DB: scaleddb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: repl123
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./config/primary.conf:/etc/postgresql/postgresql.conf
      - ./scripts/init-primary.sh:/docker-entrypoint-initdb.d/init-primary.sh
    ports:
      - '5432:5432'
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    networks:
      - postgres-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 30s
      timeout: 10s
      retries: 3

  # First PostgreSQL Replica
  postgres-replica-1:
    image: postgres:15-alpine
    container_name: postgres-replica-1
    environment:
      POSTGRES_DB: scaleddb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      PGUSER: postgres
      POSTGRES_PRIMARY_HOST: postgres-primary
      POSTGRES_PRIMARY_PORT: 5432
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: repl123
    volumes:
      - postgres_replica1_data:/var/lib/postgresql/data
      - ./config/replica.conf:/etc/postgresql/postgresql.conf
      - ./scripts/init-replica.sh:/docker-entrypoint-initdb.d/init-replica.sh
    ports:
      - '5433:5432'
    depends_on:
      postgres-primary:
        condition: service_healthy
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.8'
        reservations:
          memory: 512M
          cpus: '0.3'
    networks:
      - postgres-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 30s
      timeout: 10s
      retries: 3

  # Second PostgreSQL Replica
  postgres-replica-2:
    image: postgres:15-alpine
    container_name: postgres-replica-2
    environment:
      POSTGRES_DB: scaleddb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      PGUSER: postgres
      POSTGRES_PRIMARY_HOST: postgres-primary
      POSTGRES_PRIMARY_PORT: 5432
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: repl123
    volumes:
      - postgres_replica2_data:/var/lib/postgresql/data
      - ./config/replica.conf:/etc/postgresql/postgresql.conf
      - ./scripts/init-replica.sh:/docker-entrypoint-initdb.d/init-replica.sh
    ports:
      - '5434:5432'
    depends_on:
      postgres-primary:
        condition: service_healthy
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.8'
        reservations:
          memory: 512M
          cpus: '0.3'
    networks:
      - postgres-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 30s
      timeout: 10s
      retries: 3

  # PgBouncer Connection Pooler
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: pgbouncer
    environment:
      DATABASES_HOST: postgres-primary
      DATABASES_PORT: 5432
      DATABASES_USER: postgres
      DATABASES_PASSWORD: postgres123
      DATABASES_DBNAME: scaleddb
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 100
      DEFAULT_POOL_SIZE: 25
    volumes:
      - ./config/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
      - ./config/userlist.txt:/etc/pgbouncer/userlist.txt
    ports:
      - '6432:5432'
    depends_on:
      postgres-primary:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.4'
        reservations:
          memory: 128M
          cpus: '0.1'
    networks:
      - postgres-network

  # HAProxy Load Balancer for Read Queries
  haproxy:
    image: haproxy:alpine
    container_name: haproxy-postgres
    volumes:
      - ./config/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    ports:
      - '5000:5000' # Read-only load balanced endpoint
      - '5001:5001' # Write endpoint (primary only)
      - '8080:8080' # HAProxy stats
    depends_on:
      - postgres-primary
      - postgres-replica-1
      - postgres-replica-2
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'
    networks:
      - postgres-network

volumes:
  postgres_primary_data:
  postgres_replica1_data:
  postgres_replica2_data:

networks:
  postgres-network:
    driver: bridge
